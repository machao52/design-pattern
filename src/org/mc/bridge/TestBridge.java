package org.mc.bridge;


/**
 * Created in 2017/01/14
 * @author machao
 * 桥接模式意图将抽象部分与实现部分分离,是它们都可以独立的变化.
 * 效果及实现要点:
 * (1)桥接模式使用"对象间的绑定关系"解耦了抽象和现实之间固有的绑定关系,
 * 使得抽象和实现可以沿着各自的维度来变化.
 * (2)所谓抽象和实现沿着各维度的变化,即"子类化"它们,得到各个子类后,便
 * 可以使用它们,从而获得不同路上的不同汽车.
 * (3)桥接模式有时候类似于多继承方案,但是多继承方案往往违背了类的单一职
 * 责原则(即一个类只有一个变化的原因),复用性比较差.桥接模式是比多继承方
 * 案更好的解决方法.
 * (4)桥接模式一般在"两个非常强的变化维度",有时候即使有两个变化的维度,
 * 但是某个方向的变化维度并不剧烈----换言之两个变化并不会导致纵横交错的
 * 结果,并不一定要使用桥接模式.
 * Bridge模式是一个非常有用的模式，也非常复杂，它很好的符合了开放-封闭
 * 原则和优先使用对象，而不是继承这两个面向对象原则.
 * 桥接模式与装饰的区别:
 * 装饰模式:
 * 这两个模式在一定程度上都是为了减少子类的数目，避免出现复杂的继承关系。
 * 但是它们解决的方法却各有不同，装饰模式把子类中比基类中多出来的部分放到
 * 单独的类里面，以适应新功能增加的需要，当我们把描述新功能的类封装到基类
 * 的对象里面时，就得到了所需要的子类对象，这些描述新功能的类通过组合可以
 * 实现很多的功能组合 .
 * 桥接模式：
 * 桥接模式则把原来的基类的实现化细节抽象出来，在构造到一个实现化的结构中，
 * 然后再把原来的基类改造成一个抽象化的等级结构，这样就可以实现系统在多个
 * 维度上的独立变化 。
 */
public class TestBridge {
	
	public static void main(String[] args) {
		AbstractRoad ar=new Street();
		AbstractCar ac=new Bus();
		ar.aCar=ac;
		Person p=new Women();
		p.aRoad=ar;
		p.run();
	}

}
